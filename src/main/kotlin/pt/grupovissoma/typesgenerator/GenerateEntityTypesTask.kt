package pt.grupovissoma.typesgenerator


import com.squareup.kotlinpoet.*
import io.github.classgraph.ClassGraph
import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.ListProperty
import org.gradle.api.tasks.*
import java.nio.file.Path
import jakarta.persistence.Id
import kotlin.reflect.KProperty1
import kotlin.reflect.KVisibility


/** Gradle incremental: all inputs & outputs declared */
@CacheableTask
abstract class GenerateEntityTypesTask : DefaultTask() {

    @get:OutputDirectory
    abstract val outputDir: DirectoryProperty

    /** Inclusion filters */
    @get:Input
    abstract val filters: ListProperty<String>

    @TaskAction
    fun generate() {
        val out = outputDir.get().asFile.toPath()
        project.delete(out.toFile())
        out.toFile().mkdirs()

        val filterPkgs = filters.get()
        val entities = ClassGraph()
            .acceptPackages(*filterPkgs.toTypedArray())
            .enableAllInfo()
            .scan()
            .use { scan ->
                scan.getClassesWithAnnotation("@Entity")
                    .loadClasses()
            }

        entities.forEach { clazz ->
            val kClass = clazz.kotlin
            val pkg = clazz.`package`.name
            val props = kClass.members
                .filterIsInstance<KProperty1<*, *>>()
                .filter { it.visibility == KVisibility.PUBLIC }

            val idNames = props
                .filter { it.annotations.any { ann -> ann.annotationClass == Id::class } }
                .map { it.name }
                .toSet()

            val nonIdProps = props.filter { it.name !in idNames }

            // INPUT (all non-id required)
            generateDataClass(
                name = "${clazz.simpleName}Input",
                pkg = pkg + ".types",
                props = nonIdProps,
                makeNullable = false,
                targetDir = out
            )

            // UPDATE (all non-id optional)
            generateDataClass(
                name = "${clazz.simpleName}Update",
                pkg = pkg + ".types",
                props = nonIdProps,
                makeNullable = true,
                targetDir = out
            )
        }
    }

    private fun generateDataClass(
        name: String,
        pkg: String,
        props: List<KProperty1<*, *>>,
        makeNullable: Boolean,
        targetDir: Path
    ) {
        val classSpec = TypeSpec.classBuilder(name)
            .addModifiers(KModifier.DATA)
            .primaryConstructor(
                FunSpec.constructorBuilder().apply {
                    props.forEach { p ->
                        val type = p.returnType.asTypeName()
                        val finalType =
                            if (makeNullable && !type.isNullable) type.copy(nullable = true) else type // TODO see here because is strange
                        val paramSpec = ParameterSpec.builder(
                            p.name, finalType
                        ).apply {
                            if (makeNullable) defaultValue("null")
                        }.build()
                        addParameter(paramSpec)
                    }
                }.build()
            )
            .apply {
                props.forEach { p ->
                    val type = p.returnType.asTypeName()
                    val finalType =
                        if (makeNullable && !type.isNullable) type.copy(nullable = true) else type
                    addProperty(
                        PropertySpec.builder(p.name, finalType)
                            .initializer(p.name)
                            .build()
                    )
                }
            }
            .build()

        val fileSpec = FileSpec.builder(pkg, name)
            .addType(classSpec)
            .addFileComment("AUTO-GENERATED by graphql-kotlin-entity-generator. Do not edit.")
            .build()

        fileSpec.writeTo(targetDir)
    }
}
